/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 risedesk_materials.gltf
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

export default function RisedeskMaterials(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/risedesk_materials.gltf')
  const { actions } = useAnimations(animations, group)
  const [material, setMaterial] = useState(materials.walnut_black)
  useEffect(() => {
    console.log(materials)
    //actions.Animation.play()
    if (props.deskMaterial == "walnut_black") {
      setMaterial(materials.walnut_black)
    }
    if (props.deskMaterial == "walnut_white") {
      setMaterial(materials.walnut_white)
    }
    if (props.deskMaterial == "pear_black") {
      setMaterial(materials.pear_black)
    }
    if (props.deskMaterial == "pear_white") {
      setMaterial(materials.pear_white)
    }
    if (props.deskMaterial == "ash_black") {
      setMaterial(materials.ash_black)
    }
    if (props.deskMaterial == "ash_white") {
      setMaterial(materials.ash_white)
    }
    if (props.deskMaterial == "black_black") {
      setMaterial(materials.black_black)
    }
    if (props.deskMaterial == "black_white") {
      setMaterial(materials.black_white)
    }
    if (props.deskMaterial == "white_black") {
      setMaterial(materials.white_black)
    }
    if (props.deskMaterial == "white_white") {
      setMaterial(materials.white_white)
    }

  }, [props.deskMaterial])

  const handleClick = () => {
    if (rotate) {
      actions.Animation.stop()
      setRotate(false)
    } else {
      actions.Animation.play()
      setRotate(true)
    }

  }

  const [rotate, setRotate] = useState(false)
  useFrame(() => {
    //console.log(group.current.rotation)
    //console.log(group.current.position)
    //console.log(group.current.scale)
    if (rotate) {
      group.current.rotation.y += 0.01
    }

  })
  return (
    <group ref={group} {...props} dispose={null} rotation={[0, 3.14, 0]}
      onClick={() => handleClick()}
      position={[1.2, 0, 0]}
      scale={0.8}
    >
      <group name="Scene">
        <mesh name="moving_desk" geometry={nodes.moving_desk.geometry}
          material={material}
          morphTargetDictionary={nodes.moving_desk.morphTargetDictionary}
          morphTargetInfluences={nodes.moving_desk.morphTargetInfluences}
          position={[0, 0.03, 0.01]} rotation={[-Math.PI, 0, -Math.PI]} scale={[1, 0.04, 1]}>
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/risedesk_materials.gltf')
